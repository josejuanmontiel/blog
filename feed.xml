<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jose Juan Montiel's blog</title>
    <link>http://josejuanmontiel.github.io/blog/</link>
    <atom:link href="http://josejuanmontiel.github.io/blog//feed.xml" rel="self" type="application/rss+xml" />
    <description>JBake Bootstrap Template</description>
    <language>en-gb</language>
    <pubDate>mié, 12 oct 2016 12:24:36 +0200</pubDate>
    <lastBuildDate>mié, 12 oct 2016 12:24:36 +0200</lastBuildDate>

    <item>
      <title>Thymeleaf 3 and Groovy</title>
      <link>http://josejuanmontiel.github.io/blog/2016/10/groovy-thymelaf.html</link>
      <pubDate>mié, 12 oct 2016 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">2016/10/groovy-thymelaf.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_groovy&quot;&gt;Groovy&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first time i heard about Groovy, was in late 2010, early 2011. I used Freemind mind mapping, and then version 0.9 was about to release, with support for groovy, what was that?, It took some time using Freemind, and I said, if people use it, maybe could be interesting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A dynamic language like Javascript, which could interact with the mental maps, making them dynamic too? To create nodes, relations between them, in a dynamic way?. I tried it, I did some things: a script that compiled the ticket Fogbugz and show me drawn as nodes in the mental map.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_thymeleaf&quot;&gt;Thymeleaf&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thymeleaf templating system is a server, both as standalone web. Its main objective is to provide a template system (not strictly HTML), natural and elegant that also function as static prototypes, enabling closer collaboration in development teams.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition, modules Spring Framework, a series of integrations with their favorite tools, and the ability to connect their own functionality, thymeleaf is ideal for HTML5 web development in the JVM and more.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_why_no_mix_it&quot;&gt;Why no mix it?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the new features of thymeleaf 3 is still more design decouple HTML from data binding.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;a href=&quot;https://github.com/thymeleaf/thymeleaf/issues/465&quot;&gt;this link&lt;/a&gt; count as work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The question is, if I can lay  something like&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint html language-html&quot;&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;table id=&quot;usersTable&quot;&amp;gt;
      &amp;lt;tr&amp;gt;
        &amp;lt;td class=&quot;username&quot;&amp;gt;Jeremy Grapefruit&amp;lt;/td&amp;gt;
        &amp;lt;td class=&quot;usertype&quot;&amp;gt;Normal User&amp;lt;/td&amp;gt;
      &amp;lt;/tr&amp;gt;
      &amp;lt;tr&amp;gt;
        &amp;lt;td class=&quot;username&quot;&amp;gt;Alice Watermelon&amp;lt;/td&amp;gt;
        &amp;lt;td class=&quot;usertype&quot;&amp;gt;Administrator&amp;lt;/td&amp;gt;
      &amp;lt;/tr&amp;gt;
    &amp;lt;/table&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I can define so, as it will generate the binding of the fields&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint xml language-xml&quot;&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;
&amp;lt;thlogic&amp;gt;
  &amp;lt;attr sel=&quot;#usersTable&quot; th:remove=&quot;all-but-first&quot;&amp;gt;
    &amp;lt;attr sel=&quot;/tr[0]&quot; th:each=&quot;user : ${users}&quot;&amp;gt;
      &amp;lt;attr sel=&quot;td.username&quot; th:text=&quot;${user.name}&quot; /&amp;gt;
      &amp;lt;attr sel=&quot;td.usertype&quot; th:text=&quot;#{|user.type.${user.type}|}&quot; /&amp;gt;
    &amp;lt;/attr&amp;gt;
  &amp;lt;/attr&amp;gt;
&amp;lt;/thlogic&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;then, why not write in groovy&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;thlogic {
    attr(sel:&apos;#usersTable&apos;, &apos;th:remove&apos;:&apos;all-but-first&apos;) {
        attr(sel:&apos;/tr[0]&apos;, &apos;th:each&apos;:&apos;user : ${users}&apos;) {
            attr(sel:&apos;td.username&apos;, &apos;th:text&apos;:&apos;${user.name}&apos;)
            attr(sel:&apos;td.usertype&apos;, &apos;th:text&apos;:&apos;${user.type}&apos;)
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://forum.thymeleaf.org/Thymeleaf-and-groovy-td4029599.html&quot;&gt;Here is&lt;/a&gt; the explanation in thymeleaf&amp;#8217;s forum.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And if we can made this, we could made &lt;a href=&quot;http://groovy-lang.org/processing-xml.html#_markupbuilder&quot;&gt;this one&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;thlogic {
    attr(sel:&apos;#usersTable&apos;, &apos;th:remove&apos;:&apos;all-but-first&apos;) {
        attr(sel:&apos;/tr[0]&apos;, &apos;th:each&apos;:&apos;user : ${users}&apos;) {
			(1..3).each { n -&amp;gt;			&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
				attr(sel:&apos;td.username&apos;, &apos;th:text&apos;:&apos;${user.name}&apos;)
				attr(sel:&apos;td.usertype&apos;, &apos;th:text&apos;:&apos;${user.type}&apos;)
			}
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Include the logic in xml generation&amp;#8230;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_one_example_with_all_mixed&quot;&gt;One example with all mixed&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;a href=&quot;https://github.com/josejuanmontiel/adorable-avatar&quot;&gt;this project&lt;/a&gt; i mount an example of use of thymeleaf 3 in a springboot project with groovy as the main language, and &lt;a href=&quot;https://github.com/josejuanmontiel/dynamic-rest-template&quot;&gt;here&lt;/a&gt; took out the rest of access to services, and wanted to try something else was jitpack to generate libraries git projects, on-demand.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint gradle language-gradle&quot;&gt;&lt;code&gt;	maven { url &quot;https://jitpack.io&quot; }
	compile &apos;com.github.josejuanmontiel:dynamic-rest-template:-SNAPSHOT&apos;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_next_steps&quot;&gt;Next steps&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many applications are the type, called a rest services and exposure in the view. Why not make an application front, in the back? I thought it would be quite interesting, that in the definition of binding in groovy could add information about the rest services to be consulted, to fill the data binding in the rendering phase.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;rest{
	url{
		http://...
	}
	binding {
		user.name=response.body.user
		user.type=response.body.type
		...
	}
}
thlogic {
    attr(sel:&apos;#usersTable&apos;, &apos;th:remove&apos;:&apos;all-but-first&apos;) {
        attr(sel:&apos;/tr[0]&apos;, &apos;th:each&apos;:&apos;user : ${users}&apos;) {
            attr(sel:&apos;td.username&apos;, &apos;th:text&apos;:&apos;${user.name}&apos;)
            attr(sel:&apos;td.usertype&apos;, &apos;th:text&apos;:&apos;${user.type}&apos;)
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And seeing the &lt;a href=&quot;https://twitter.com/nicolas_frankel/status/760441910272135168&quot;&gt;tweet&lt;/a&gt; Nicolas Frankel, test values (maximum and minimum) of each of the fields are indicated binding and that during development, are that the fake data used to lay out the project, while services are mounted.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;rest{
	url{ ... }
	binding { ... }
	test {
		user.name=[user1, user2, user3]
		user.type=[admin, normal, editor]
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For all this, metaprogramming &amp;#8230; in groovy. To see what ends the idea.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Thymeleaf 3 and Groovy</title>
      <link>http://josejuanmontiel.github.io/blog/2016/10/groovy-thymelaf.es.html</link>
      <pubDate>mié, 12 oct 2016 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">2016/10/groovy-thymelaf.es.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_groovy&quot;&gt;Groovy&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La primera vez que hoy hablar de Groovy fue a finales de 2010, principios de 2011. Yo usaba Freemind para hacer mapas mentales, y por aquel entonces la version 0.9 estaba a punto de salir, con soporte para groovy, ¿que era eso?, llevaba ya algun tiempo usando Freemind, y me dije: si esta gente lo usa, lo mismo es interesante.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;¿Un lenguaje dinamico como Javascript, que podia interactuar con los mapas mentales, haciendolos dinamicos tambien? ¿Crear nodos, relaciones entre ellos, de una manera dinamica?. Lo probe, he hice algunas cositas: un script que recopilaba los ticket de fogbugz y me los mostaba dibujados como nodos del mapa mental.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_thymeleaf&quot;&gt;Thymeleaf&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thymeleaf es un sistema de templating de servidor, tanto web como standalone. Su principal objetivo es brindar un sistema de plantillas (no estrictamente HTML), natural y elegante que ademas funcione como prototipos estáticos, lo que permite una colaboración más estrecha en los equipos de desarrollo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ademas, con módulos de Spring Framework, una serie de integraciones con sus herramientas favoritas, y la capacidad de conectar su propia funcionalidad, Thymeleaf es ideal para el desarrollo web HTML5 en la JVM y mucho mas.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;__porque_no_mezclarlo&quot;&gt;¿Porque no mezclarlo?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Una de las caracteristicas nuevas de Thymeleaf 3, es que todavia desacoplan mas el diseño del HTML, del binding de datos.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En &lt;a href=&quot;https://github.com/thymeleaf/thymeleaf/issues/465&quot;&gt;este link&lt;/a&gt; cuentan como funciona.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La cuestion es, que si puedo maquetar algo asi&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint html language-html&quot;&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;table id=&quot;usersTable&quot;&amp;gt;
      &amp;lt;tr&amp;gt;
        &amp;lt;td class=&quot;username&quot;&amp;gt;Jeremy Grapefruit&amp;lt;/td&amp;gt;
        &amp;lt;td class=&quot;usertype&quot;&amp;gt;Normal User&amp;lt;/td&amp;gt;
      &amp;lt;/tr&amp;gt;
      &amp;lt;tr&amp;gt;
        &amp;lt;td class=&quot;username&quot;&amp;gt;Alice Watermelon&amp;lt;/td&amp;gt;
        &amp;lt;td class=&quot;usertype&quot;&amp;gt;Administrator&amp;lt;/td&amp;gt;
      &amp;lt;/tr&amp;gt;
    &amp;lt;/table&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;puedo definir asi, como se va a generar el binding de los campos&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint xml language-xml&quot;&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;
&amp;lt;thlogic&amp;gt;
  &amp;lt;attr sel=&quot;#usersTable&quot; th:remove=&quot;all-but-first&quot;&amp;gt;
    &amp;lt;attr sel=&quot;/tr[0]&quot; th:each=&quot;user : ${users}&quot;&amp;gt;
      &amp;lt;attr sel=&quot;td.username&quot; th:text=&quot;${user.name}&quot; /&amp;gt;
      &amp;lt;attr sel=&quot;td.usertype&quot; th:text=&quot;#{|user.type.${user.type}|}&quot; /&amp;gt;
    &amp;lt;/attr&amp;gt;
  &amp;lt;/attr&amp;gt;
&amp;lt;/thlogic&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;entonces, porque no escribirlo en groovy&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;thlogic {
    attr(sel:&apos;#usersTable&apos;, &apos;th:remove&apos;:&apos;all-but-first&apos;) {
        attr(sel:&apos;/tr[0]&apos;, &apos;th:each&apos;:&apos;user : ${users}&apos;) {
            attr(sel:&apos;td.username&apos;, &apos;th:text&apos;:&apos;${user.name}&apos;)
            attr(sel:&apos;td.usertype&apos;, &apos;th:text&apos;:&apos;${user.type}&apos;)
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://forum.thymeleaf.org/Thymeleaf-and-groovy-td4029599.html&quot;&gt;Aqui esta&lt;/a&gt; la explicacion en el foro de thymeleaf.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Y si podemos hacer eso, podriamos hacer &lt;a href=&quot;http://groovy-lang.org/processing-xml.html#_markupbuilder&quot;&gt;esto&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;thlogic {
    attr(sel:&apos;#usersTable&apos;, &apos;th:remove&apos;:&apos;all-but-first&apos;) {
        attr(sel:&apos;/tr[0]&apos;, &apos;th:each&apos;:&apos;user : ${users}&apos;) {
			(1..3).each { n -&amp;gt;			&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
				attr(sel:&apos;td.username&apos;, &apos;th:text&apos;:&apos;${user.name}&apos;)
				attr(sel:&apos;td.usertype&apos;, &apos;th:text&apos;:&apos;${user.type}&apos;)
			}
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Incluir logica en la generacion del Xml&amp;#8230;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_un_ejemplo_con_todo_junto&quot;&gt;Un ejemplo con todo junto&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En &lt;a href=&quot;https://github.com/josejuanmontiel/adorable-avatar&quot;&gt;este&lt;/a&gt; monte un ejemplo de uso de thymeleaf 3, en un proyecto springboot con groovy como lenguaje principal, y &lt;a href=&quot;https://github.com/josejuanmontiel/dynamic-rest-template&quot;&gt;aqui&lt;/a&gt; extraje la parte de acceso a servicios rest, y otra cosa que queria probar era jitpack, para generar librerias de projectos git, on-demand.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint gradle language-gradle&quot;&gt;&lt;code&gt;	maven { url &quot;https://jitpack.io&quot; }
	compile &apos;com.github.josejuanmontiel:dynamic-rest-template:-SNAPSHOT&apos;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_proximos_pasos&quot;&gt;Proximos pasos&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Muchas aplicaciones son del tipo, llamada a servicios rest, y exposicion en la vista. ¿Porque no hacer una aplicacion front, en el back? Pense que seria bastante interesante, que en esa definicion de binding en groovy se pudiera añadir informacion sobre los servicios rest que se van a consultar, para rellenar los datos de ese binding en la fase de renderizado.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;rest{
	url{
		http://...
	}
	binding {
		user.name=response.body.user
		user.type=response.body.type
		...
	}
}
thlogic {
    attr(sel:&apos;#usersTable&apos;, &apos;th:remove&apos;:&apos;all-but-first&apos;) {
        attr(sel:&apos;/tr[0]&apos;, &apos;th:each&apos;:&apos;user : ${users}&apos;) {
            attr(sel:&apos;td.username&apos;, &apos;th:text&apos;:&apos;${user.name}&apos;)
            attr(sel:&apos;td.usertype&apos;, &apos;th:text&apos;:&apos;${user.type}&apos;)
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Y al ver el &lt;a href=&quot;https://twitter.com/nicolas_frankel/status/760441910272135168&quot;&gt;tweet&lt;/a&gt; de Nicolas Frankel, que se indiquen los valores de prueba (maximos y minimos) de cada uno de los campos del binding y que durante desarrollo, sean eso los datos fake que se usen para maquetar el proyecto, mientras se montan los servicios.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;rest{
	url{ ... }
	binding { ... }
	test {
		user.name=[user1, user2, user3]
		user.type=[admin, normal, editor]
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Para todo esto, metaprogracion&amp;#8230; en groovy. A ver en que termina la idea.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Blog in GitHub Pages with Jbake and Gradle</title>
      <link>http://josejuanmontiel.github.io/blog/2016/08/blog-jbake-gradle.html</link>
      <pubDate>jue, 25 ago 2016 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">2016/08/blog-jbake-gradle.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_it_s_time_to_start_a_blog_about_programming&quot;&gt;It&amp;#8217;s time to start a blog about programming&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The truth is that as time passes, you realize that sharing is winning. Some, are given as much before, but although
I already intuited, have had to spend over 10 years in the art of programming to realize. Share is to win,
is to know other opinions, ways of doing things and of course, meet other people&amp;#8230; they call networking.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I already had a &lt;a href=&quot;http://accreativos.blogspot.com.es/&quot;&gt;blog&lt;/a&gt; is more a list of things you&amp;#8217;re finding and take note to
remember, that really a way to share information and comment on it. Then came the
&lt;a href=&quot;http://twitter.com/accreativos&quot;&gt;twitter&lt;/a&gt; but in the end, it is a mixture of retweets, and little original information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, why not, a serious blog, like those used to reading these, those where people end up leaving
a lot of comments, those that you add to your RSS reader to be aware of what is said in them,
And if you learn something mounting it, because what else can you ask for.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Therefore, items that will use this blog are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;English (Spanish)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GitHub Pages&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AsciiDoctor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Groovy&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jbake&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gradle&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Freemarker (Thymeleaf)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Discus (Discourse)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We see you in a bit of detail each point.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_english&quot;&gt;English&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first thing I take advantage of it to improve my English. So, although I write in Spanish, my native language,
publishes in English (and I assume that since I write in Spanish, these also the publicare, and I&amp;#8217;ll see as attachment).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_github_pages&quot;&gt;Github Pages&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;GitHub for some time now began to publish static pages allow for all your projects done. If you are looking for
&lt;a href=&quot;https://pages.github.com&quot;&gt;https://pages.github.com&lt;/a&gt; [Github Pages] will see extensive information, besides, many people already using github
tapped to mount functionality for small static sites.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Basically it is that everything that you upload to the branch gh-pages of your github repository, will be visible in the domain
&lt;a href=&quot;http://username.github.io/repo/file&quot;&gt;http://username.github.io/repo/file&lt;/a&gt; where username is your user github, repo is the name of the repo where these
going up files to the branch gh-pages and file is the file that if an index.html the browser displays,
and the same for css and js with what you already have ready the web.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;They also provide a default generator, &lt;a href=&quot;https://help.github.com/articles/about-github-pages-and-jekyll/&quot;&gt;Jekyll&lt;/a&gt;
to generate these static pages from a text in markdown format, but we will not use it,
We see the alternative.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_asciidoctor&quot;&gt;AsciiDoctor&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We prefer to use something that is between, markdown and latex, and that is called &lt;a href=&quot;http://asciidoctor.org/&quot;&gt;AsciiDoctor&lt;/a&gt; that
true also this &lt;a href=&quot;http://asciidoctor.org/news/2014/02/04/github-asciidoctor-0.1.4-upgrade-5-things-to-know/&quot;&gt;supported&lt;/a&gt;
by GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_groovy&quot;&gt;Groovy&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Like my native language is Spanish, my native language is this in Java programming, and as is
learn, and I have a few years playing with groovy, and I will not miss the opportunity to mount the blog using it.
I will tell on another occasion, as I started in this groovy, and what are the places where I learn.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_jbake&quot;&gt;Jbake&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And we have said that we were not going to use &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; that is done in Ruby, because what we mola is
Groovy;) But we need our written txt in AsciiDoctor be transformed into HTML (or XML we&amp;#8217;ll see how)
and above all that what we write is inserted in those HTML, we will use &lt;a href=&quot;http://jbake.org/&quot;&gt;Jbake&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_gradle&quot;&gt;Gradle&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But hey, this needs to be automated, at the end, there are a number of steps, why not use Gradle, as well
&lt;a href=&quot;http://melix.github.io/blog/2014/02/hosting-jbake-github.html&quot;&gt;the creator&lt;/a&gt; of
&lt;a href=&quot;https://github.com/jbake-org/jbake-gradle-plugin&quot;&gt;plugin&lt;/a&gt;, it is the perfect combination.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A couple of notes, as it has been somewhat outdated &amp;#8230; &lt;a href=&quot;http://www.orany.cz/blog/2014/10/17/migrated-to-jbake.html&quot;&gt;that
Ornay write time ago&lt;/a&gt; and which faces plugin to upload the pages to the branch, it has also been actualized,
&lt;a href=&quot;https://plugins.gradle.org/plugin/org.ajoberstar.github-pages&quot;&gt;aqui this&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_freemarker_thymeleaf&quot;&gt;Freemarker (Thymeleaf)&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And this tool is able to use different templating systems (specifically start with Freemarker, and more
I later migrate to Thymeleaf) to inject the values ​​obtained in asciidoctor txt, along with some
more variables to help build a blogging system that does not have anything envy to Jeklly, Wordpress or
what is put forward.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_disqus_discourse&quot;&gt;Disqus (Discourse)&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But finally, a system without the possibility of blog comments, don&amp;#8217;t make sense. To do all these i used
&lt;a href=&quot;https://disqus.com/&quot;&gt;Discus&lt;/a&gt; that integrate perfectly with a line (almost). As an option, I will try to migrate to
&lt;a href=&quot;https://www.discourse.org/&quot;&gt;Discourse&lt;/a&gt; but that will come later.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_extra_ball_analytics&quot;&gt;Extra Ball. Analytics.&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As extra ball, remember to add the analitica.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Keep on Groovying!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Blog en GitHub Pages con Jbake y Gradle</title>
      <link>http://josejuanmontiel.github.io/blog/2016/08/blog-jbake-gradle.es.html</link>
      <pubDate>jue, 25 ago 2016 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">2016/08/blog-jbake-gradle.es.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_es_hora_de_empezar_un_blog_sobre_programacion&quot;&gt;Es hora de empezar un blog sobre programacion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La verdad es que conforme pasa el tiempo, te das cuenta que compartir es ganar. Algunos se dan cuanta antes, pero aunque
yo ya lo intuia, han tenido que pasar mas de 10 años en esto de la programacion para darme cuenta. Compartir es ganar,
es conocer otras opiniones, maneras de hacer las cosas y como no, conocer a otras personas&amp;#8230; networking le llaman.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Yo ya tenia un &lt;a href=&quot;http://accreativos.blogspot.com.es/&quot;&gt;blog&lt;/a&gt;, es mas una lista de cosas que te vas encontrando y apuntas
para tener en algugn sitio, que realmente una manera de compartir informacion y opinar sobre ella. Luego llego el
&lt;a href=&quot;http://twitter.com/accreativos&quot;&gt;twitter&lt;/a&gt; pero al final, es una mezcla de retweets, y poca informacion original.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Asi que, por que no, un blog serio, como esos que estas acostumbrado a leer, de esos donde la gente termina dejando
una gran cantidad de comentarios, de esos que añades a tu lector RSS para estar al tanto de lo que se comenta en ellos,
y si ademas aprendes algo al montandolo, pues que mas se puede pedir.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Por tanto, los elementos que voy a usar para este blog son:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ingles (Español)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GitHub Pages&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AsciiDoctor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Groovy&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jbake&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gradle&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Freemarker (Thymeleaf)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Discus (Discourse)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vemos en un poco en detalle cada punto.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_ingles&quot;&gt;Ingles&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lo primero que voy aprovechar es para mejorar mi ingles. Asi que, aunque lo redacte en español, mi lengua nativa, lo
publicare en ingles (y supongo que ya que los redacto en español, estos tambien los publicare, ya vere como lo implemento).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_github_pages&quot;&gt;Github Pages&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ya hace algun tiempo que GitHub empezo a permitir publicar paginas estaticas para todos sus proyectos. Si buscas por
&lt;a href=&quot;https://pages.github.com&quot;&gt;Github Pages&lt;/a&gt; podras ver amplia informacion al respecto, ademas, mucha gente que usa ya github
a aprovechado la funcionalidad para montar pequeños sites estaticos.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Basicamente es que, todo lo que subas a la rama gh-pages de tu repositorio github, sera visible en el dominio
&lt;a href=&quot;http://username.github.io/repo/file&quot;&gt;http://username.github.io/repo/file&lt;/a&gt; donde username, es tu usuario de github, repo es el nombre del repo donde estas
subiendo los ficheros a la rama gh-pages y file, es el fichero, que si es un index.html el navegador lo visualiza,
y lo mismo para los css y js, con lo que ya tienes listo la web.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ademas, proveen de un generador por defecto, &lt;a href=&quot;https://help.github.com/articles/about-github-pages-and-jekyll/&quot;&gt;Jekyll&lt;/a&gt;,
para generar esas paginas estaticas, a partir de un texto en formato markdown, pero nosotros no vamos a usarlo,
veremos la alternativa.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_asciidoctor&quot;&gt;AsciiDoctor&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Preferimos usar algo que esta entre, markdown y latex, y eso se llama &lt;a href=&quot;http://asciidoctor.org/&quot;&gt;AsciiDoctor&lt;/a&gt; que por
cierto tambien esta &lt;a href=&quot;http://asciidoctor.org/news/2014/02/04/github-asciidoctor-0.1.4-upgrade-5-things-to-know/&quot;&gt;soportado&lt;/a&gt;
por GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_groovy&quot;&gt;Groovy&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Igual que mi lenguaje nativo es el español, mi lenguaje nativo en esto de la programacion es Java, y como se trata de
aprender, ya llevo unos años jugando con groovy, y no voy a desaprovechar la oportunidad para montar el blog usandolo.
Ya contare en otra ocasion, como me inicie en esto de groovy, y cuales son los lugares donde yo, aprendo.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_jbake&quot;&gt;Jbake&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Y ya hemos dicho que no ibamos a usar &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; que esta hecho en Ruby, porque lo que nos mola es
Groovy ;) Pero necesitamos que nuestros txt escritos en AsciiDoctor se transformen en HTML (o XML ya veremos como),
y sobre todo que lo que escribimos se inserte en esos HTML, para ello usaremos &lt;a href=&quot;http://jbake.org/&quot;&gt;Jbake&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_gradle&quot;&gt;Gradle&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pero bueno, esto necesita automatizarse, al final son una serie de pasos que porque no usar gradle, y como bien
&lt;a href=&quot;http://melix.github.io/blog/2014/02/hosting-jbake-github.html&quot;&gt;cuenta&lt;/a&gt; el creador del
&lt;a href=&quot;https://github.com/jbake-org/jbake-gradle-plugin&quot;&gt;plugin&lt;/a&gt;, es la combinacion perfecta.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Un par de apuntes, pues ha quedado algo desactualizado&amp;#8230; &lt;a href=&quot;http://www.orany.cz/blog/2014/10/17/migrated-to-jbake.html&quot;&gt;que
hace Ornay&lt;/a&gt; y el plugin que se encara de subir las paginas a la rama, tambien ha sido actualido,
&lt;a href=&quot;https://plugins.gradle.org/plugin/org.ajoberstar.github-pages&quot;&gt;aqui esta&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_freemarker_thymeleaf&quot;&gt;Freemarker (Thymeleaf)&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Y esta herramienta es capaz de usar distintos sistemas de templating (en concreto empezaremos con Freemarker, y mas
adelante lo migraremos a Thymeleaf) para inyectarles los valores obtenidos del txt en asciidoctor, junto con algunas
variables mas que ayudaran a construir un sistema de blogging que no tiene que enviadiar nada a Jeklly, Wordpress o
lo que se ponga por delante.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_disqus_discourse&quot;&gt;Disqus (Discourse)&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pero por ultimo, que es un sistema de blog sin la posibilidad de comentarios, pues nada. Para ello todos estos sistmas
usan &lt;a href=&quot;https://disqus.com/&quot;&gt;Discus&lt;/a&gt; que se intera perfectamente con una linea (casi). Como opcion, intentare migrar a
&lt;a href=&quot;https://www.discourse.org/&quot;&gt;Discourse&lt;/a&gt; pero eso sera mas adelante.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_bola_extra_analitica&quot;&gt;Bola extra. Analitica.&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Como bola extra, recordar añadir la analitica.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Keep on Groovying!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>

  </channel> 
</rss>
